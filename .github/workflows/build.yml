name: ChromiumDriver CI
on: [push, pull_request]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  prepare_matrix:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.generate-matrix.outputs.lts }}
    steps:
    - name: Select all current LTS versions of Node.js
      id: generate-matrix
      uses: msimerson/node-lts-versions@v1

  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm install
      - name: ESLint
        run: npm run lint

  test:
    needs:
    - lint
    - prepare_matrix
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ${{ fromJSON(needs.prepare_matrix.outputs.versions) }}
    name: Tests
    permissions:
      contents: read
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm install
      - name: Configure Appium Server
        shell: bash
        run: |
          appium_ver=$(node -p "require('./package.json').peerDependencies?.appium")
          npm install -g "appium@$appium_ver"
          cwd=$(pwd)
          pushd "$cwd"
          cd ~
          appium driver install --source=local "$cwd"
          popd
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@latest
        id: setup-chrome
      - name: Configure Chrome
        shell: bash
        run: echo "CHROME_BIN=${{ steps.setup-chrome.outputs.chrome-path }}" >> $GITHUB_ENV
      - name: Start Display
        if: ${{ runner.os != 'Windows' }}
        run: DISPLAY=:99 sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
      - name: Run smoke, unit & E2E tests
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            TEST_PLATFORM="${{ runner.os }}" npm run test:ci
          else
            DISPLAY=:99 TEST_PLATFORM="${{ runner.os }}" npm run test:ci
          fi

  release:
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - run: npm install --no-package-lock
      name: Install dependencies
    - run: npm run build
      name: Run build
    - run: |
        rm -rf package-lock.json node_modules
        # Remove dev and peer dependencies from node_modules
        npm prune --omit=dev --omit=peer --no-package-lock
      name: Remove dev dependencies and appium peer dependencies
    - run: npm shrinkwrap --omit=dev --omit=peer
      name: Create shrinkwrap
    - run: npm install --only=dev --no-package-lock
      name: Install dev dependencies for the release
    - run: npx semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      name: Release
